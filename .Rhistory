})
Rtibble_to_txm(LVtweets,
to_dir=dirout)
unlink(dirout, recursive = TRUE)
test_that("txm_to_iramuteq() is OK",{
fileout="textot_fables.txt"
txm_to_iramuteq(from_dir=system.file("extdata/fables", package="textoteR"),
filename=fileout)
expect_true(file.exists(fileout),"Expected output file does not exist")
file.remove(fileout)
})
result=txm_to_Rtibble(from_dir=system.file("extdata/fables", package="textoteR"))
expect_true(dplyr::is.tbl(result),
"Expected a tibble as a result")
expect_true(ncol(result)>3,
"Number of columns should be > 3")
expect_true(all(c("id","text" %in%colnames(result))),
"Names of columns should comprise 'id' and 'text'")
result=txm_to_Rtibble(from_dir=system.file("extdata/fables", package="textoteR"))
result
dplyr::is.tbl(result)
ncol(result)>3
c("id","text") %in% colnames(result)
expect_true(all(c("id","text") %in% colnames(result)),
"Names of columns should comprise 'id' and 'text'")
test_that("txm_to_Rtibble() is OK",{
dirout="tweets_txm"
result=txm_to_Rtibble(from_dir=system.file("extdata/fables", package="textoteR"))
expect_true(dplyr::is.tbl(result),
"Expected a tibble as a result")
expect_true(ncol(result)>3,
"Number of columns should be > 3")
expect_true(all(c("id","text") %in% colnames(result)),
"Names of columns should comprise 'id' and 'text'")
})
dirout="corpus_txm"
iramuteq_to_txm(from_dir=system.file("extdata/fables", package="textoteR"),
filename="textot.txt",
to_dir=dirout
)
expect_true(dir.exists(dirout),"Expected output directory does not exist")
unlink(dirout, recursive=TRUE)
test_that("iramuteq_to_txm() is OK",{
dirout="corpus_txm"
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="textot.txt",
to_dir=dirout
)
expect_true(dir.exists(dirout),"Expected output directory does not exist")
unlink(dirout, recursive=TRUE)
})
dirout="corpus_txm"
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="textot.txt",
to_dir=dirout
)
metadata=get_metadata(sourcetype=="iramuteq",
from_dir=system.file("extdata", package="textoteR"),
filename="textot.txt")
metadata=get_metadata(sourcetype="iramuteq",
from_dir=system.file("extdata", package="textoteR"),
filename="textot.txt")
metadata=get_metadata(sourcetype="Iramuteq",
from_dir=system.file("extdata", package="textoteR"),
filename="textot.txt")
expect_true(nrow(metadata)=length(list.files(dirout))-1,
"Number of files in output directory is not the one expected.")
expect_true(nrow(metadata)==length(list.files(dirout))-1,
"Number of files in output directory is not the one expected.")
expect_true(dir.exists(dirout),
"Expected output directory does not exist")
unlink(dirout, recursive=TRUE)
test_that("iramuteq_to_txm() is OK",{
dirout="corpus_txm"
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="textot.txt",
to_dir=dirout
)
metadata=get_metadata(sourcetype="Iramuteq",
from_dir=system.file("extdata", package="textoteR"),
filename="textot.txt")
expect_true(nrow(metadata)==length(list.files(dirout))-1,
"Number of files in output directory is not the one expected.")
expect_true(dir.exists(dirout),
"Expected output directory does not exist")
unlink(dirout, recursive=TRUE)
})
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="textot.txt",
to_dir=dirout
)
metadata=get_metadata(sourcetype="Iramuteq",
from_dir=system.file("extdata", package="textoteR"),
filename="textot.txt")
nrow(metadata)
length(list.files(dirout))
dirout="macron_covid_txm"
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt",
to_dir=dirout
)
library(textoteR)
metadata=get_metadata(sourcetype="Iramuteq",
from_dir=system.file("extdata", package="textoteR"),
filename="textot.txt")
dirout="macron_covid_txm"
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt",
to_dir=dirout
)
list.files(system.file("extdata", package="textoteR"))
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid",
to_dir=dirout
)
metadata=get_metadata(sourcetype="Iramuteq",
from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt")
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt",
to_dir=dirout
)
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt",
to_dir=dirout
)
library(textoteR)
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt",
to_dir=dirout
)
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt",
to_dir=dirout
)
metadata=get_metadata(sourcetype="Iramuteq",
from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt")
metadata
expect_true(nrow(metadata)==length(list.files(dirout))-1,
"Number of files in output directory is not the one expected.")
library(textoteR)
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt",
to_dir=dirout
)
dirout="macron_covid_txm"
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt",
to_dir=dirout
)
metadata=get_metadata(sourcetype="Iramuteq",
from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt")
metadat
metadata
dirout="macron_covid_txm"
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt",
to_dir=dirout
)
library(testthat)
library(textoteR)
dirout="macron_covid_txm"
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt",
to_dir=dirout
)
library(textoteR)
library(testthat)
library(textoteR)
dirout="macron_covid_txm"
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt",
to_dir=dirout
)
?write.csv
library(textoteR)
dirout="macron_covid_txm"
iramuteq_to_txm(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt",
to_dir=dirout
)
result=iramuteq_to_Rtibble(from_dir=system.file("extdata", package="textoteR"),
filename="macron_covid.txt")
result
devtools::document()
library(textoteR)
library(textoteR)
library(textoteR)
devtools::document()
library(textoteR)
library(textoteR)
devtools::document()
library(textoteR)
devtools::document()
devtools::document()
library(textoteR)
library(textoteR)
usethis::use_package("dplyr")
library(textoteR)
devtools::document()
usethis::use_package("stringr")
usethis::use_package("purrr")
usethis::use_package("tibble")
devtools::document()
library(textoteR)
usethis::use_package("rlang")
devtools::document()
library(textoteR)
package="textoteR"))
devtools::document()
library(textoteR)
devtools::document()
library(textoteR)
txm_to_Rtibble(from_dir=system.file("extdata/fables",
package="textoteR"))
txm_to_iramuteq(from_dir=system.file("extdata/corpus",
package="textoteR"),
to_dir="outputs",
filename="alltexts_iramuteq.txt")
devtools::document(as.package())
devtools::document()
library(textoteR)
library(textoteR)
devtools::document()
library(textoteR)
library(textoteR)
library(textoteR)
library(textoteR)
devtools::document()
devtools::document()
library(textoteR)
metadata=read.csv(system.file("fables/metadata.csv",
package="textoteR"))
system.file("fables/metadata.csv",
package="textoteR")
system.file("fables",
package="textoteR")
system.file("extdata/fables/metadata.csv",
package="textoteR")
package="textoteR"))
metadata=read.csv(system.file("extdata/fables/metadata.csv",
package="textoteR"))
format_metadata(metadata)
Rtibble_to_iramuteq(LVtweets,filename="LVtweets.txt")
usethis::use_vignette(textoteR)
usethis::use_vignette("textoteR")
library(rematch)
library(remat)
find.package("remat")
find.package(remat)
find.package(remat)
find.package("remat")
find.package("remotes")
find.package("remo")
!find.package("remo")
!find.package("remo", character.only=TRUE)
?find.package
try(find.package("remo"))
?try
print(try(log("a"), TRUE))
print(try(log(3), TRUE))
try(log("a"))
try(log("a"))==TRUE
try(log("a"))==FALSE
truc=try(log("a"))
truc
class(truc)
system.package("remo")
system.file(package="remo")
system.file(package="remotes")
usethis::use_readme_rmd()
?Rtibble_to_iramuteq
library(textoteR)
path_fables=system.file("extdata/fables",package="textoteR")
path_fables
txm_to_Rtibble(from_dir=path_fables)
devtools::document()as.package()
data
library(textoteR)
devtools::document()
library(textoteR)
library(textoteR)
library(textoteR)
path_to_txm=system.file("extdata/fables",
package="textoteR")
library(textoteR)
library(textoteR)
path_to_txm=system.file("extdata/fables",
package="textoteR")
list.files(path_to_txm)
txm_to_Rtibble(from_dir=path_to_txm)
txm_to_iramuteq(from_dir=path_to_txm,
filename="fables_iramuteq.txt")
cat("fables_iramuteq.txt")
file.remove("fables_iramuteq.txt")
cat(readLines("fables_iramuteq.txt", sep="\n")
file.remove("fables_iramuteq.txt")
getwd()
txm_to_iramuteq(from_dir=path_to_txm,
filename="fables_iramuteq.txt")
cat(readLines("fables_iramuteq.txt", sep="\n")
cat(readLines("fables_iramuteq.txt", sep="\n"))
cat(readLines("fables_iramuteq.txt", sep="\n"))
cat(readLines("fables_iramuteq.txt"), sep="\n")
file.remove("fables_iramuteq.txt")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(textoteR)
library(textoteR)
path_to_iramuteq_corpus=system.file("extdata", package="textoteR")
iramuteq_to_rtibble(from_dir=path_to_iramuteq_corpus,
filename="macron_covid.txt")
iramuteq_to_txm(from_dir=path_to_iramuteq_corpus,
filename="fables_iramuteq.txt",
to_dir="macron_covid_corpus")
iramuteq_to_txm(from_dir=path_to_iramuteq_corpus,
filename="macron_covid.txt",
to_dir="macron_covid_corpus")
list.files(macron_covid_corpus)
list.files("macron_covid_corpus")
cat(readLines("txt1.txt"))
list.files("macron_covid_corpus")
cat(readLines("txt1.txt"))
cat(readLines("macron_covid_corpus/txt1.txt"))
unlink("macron_covid_corpus",recursive=TRUE)
iramuteq_to_txm(from_dir=path_to_iramuteq_corpus,
filename="macron_covid.txt",
to_dir="macron_covid_corpus")
?cat
?writeLines
unlink("macron_covid_corpus",recursive=TRUE)
library(textoteR)
library(textoteR)
iramuteq_to_txm(from_dir=path_to_iramuteq_corpus,
filename="macron_covid.txt",
to_dir="macron_covid_corpus")
library(textoteR)
library(textoteR)
iramuteq_to_txm(from_dir=path_to_iramuteq_corpus,
filename="macron_covid.txt",
to_dir="macron_covid_corpus")
list.files("macron_covid_corpus")
cat(readLines("macron_covid_corpus/txt1.txt"))
unlink("macron_covid_corpus",recursive=TRUE)
?message
library(textoteR)
library(textoteR)
iramuteq_to_rtibble(from_dir=path_to_iramuteq_corpus,
filename="macron_covid.txt")
iramuteq_to_txm(from_dir=path_to_iramuteq_corpus,
filename="macron_covid.txt",
to_dir="macron_covid_corpus")
list.files("macron_covid_corpus")
cat(readLines("macron_covid_corpus/txt1.txt"))
unlink("macron_covid_corpus",recursive=TRUE)
#' A dataset containing the prices and other attributes of almost 54,000
#' diamonds.
#'
#' @format A data frame with 53940 rows and 10 variables:
#' \describe{
#'   \item{price}{price, in US dollars}
#'   \item{carat}{weight of the diamond, in carats}
#'   ...
#' }
#' @source \url{http://www.diamondse.info/}
"LVtweets"
LVtweets
devtools::document()
library(textoteR)
library(textoteR)
get_metadata(sourcetype="txm",
from_dir=paste0(find.package("textoteR"),"/extdata/fables"),
filename="textot.txt",
encoding="UTF-8")
get_metadata(sourcetype="iramuteq",
from_dir=paste0(find.package("textoteR"),"/extdata"),
filename="textot.txt",
encoding="UTF-8")
get_metadata(sourcetype="rtibble",
encoding="UTF-8")
get_metadata(sourcetype="txm",
from_dir=system.file("extdata/fables",package="textoteR"),
encoding="UTF-8")
filename="macron_covid.txt",
get_metadata(sourcetype="iramuteq",
from_dir=system.file("extdata",package="textoteR"),
filename="macron_covid
#' get_metadata(sourcetype="iramuteq",
#'              from_dir=system.file("extdata",package="textoteR"),
#'              filename="macron_covid.txt",
#'              encoding="UTF-8")
#' get_metadata(sourcetype="iramuteq",
#'              from_dir=system.file("extdata",package="textoteR"),
#'              filename="macron_covid.txt",
#'              encoding="UTF-8")
get_metadata(sourcetype="iramuteq",
from_dir=system.file("extdata",package="textoteR"),
filename="macron_covid.txt",
encoding="UTF-8")
get_metadata(sourcetype="rtibble",
rtibble=LVtweets)
get_textdata(sourcetype="txm",
from_dir=system.file("extdata/fables",package="textoteR"),
encoding="UTF-8")
get_textdata(sourcetype="iramuteq",
from_dir=system.file("extdata",package="textoteR"),
filename="macron_covid.txt",
encoding="UTF-8")
get_textdata(sourcetype="rtibble",
rtibble=LVtweets)
get_textdata(sourcetype="txm",
from_dir=system.file("extdata/fables",package="textoteR"),
encoding="UTF-8")
get_textdata(sourcetype="iramuteq",
from_dir=system.file("extdata",package="textoteR"),
filename="macron_covid.txt",
encoding="UTF-8")
get_textdata(sourcetype="rtibble",
rtibble=LVtweets)
#' @examples
#' get_textdata(sourcetype="txm",
#'              from_dir=system.file("extdata/fables",package="textoteR"),
#'              encoding="UTF-8")
#' get_textdata(sourcetype="iramuteq",
#'              from_dir=system.file("extdata",package="textoteR"),
#'              filename="macron_covid.txt",
#'              encoding="UTF-8")
#' get_textdata(sourcetype="rtibble",
#'              rtibble=LVtweets)
get_textdata=function(sourcetype,
from_dir=getwd(),
filename="textot.txt",
encoding="UTF-8",
rtibble){
if(all(c("iramuteq","txm","rtibble")!=sourcetype)){
stop("Argument sourcetype must be one of 'iramuteq','txm' or 'rtibble'")
}
if(sourcetype=="iramuteq"){
if(!dir.exists(from_dir)){stop("Directory from_dir does not exist")}
filename=paste0(from_dir,"/",filename)
if(!file.exists(filename)){stop("filename does not correspond to existing file")}
textot=readLines(filename)
textot=textot[textot!=""]
textdata= textot %>%
stringr::str_subset("\\*{4}", negate=TRUE) %>%
tibble::tibble(text=.)
}
if(sourcetype=="txm"){
if(!dir.exists(from_dir)){stop("Directory from_dir does not exist")}
text_files=list.files(from_dir) %>%
stringr::str_subset("\\.txt$")
text_ids=text_files %>%
stringr::str_extract(".*(?=\\.txt$)")
text_filepaths=paste0(from_dir,"/",text_files)
textdata=tibble::tibble(id=text_ids,
text=text_filepaths %>%
purrr::map(readLines,
encoding=encoding) %>%
purrr::map_chr(stringr::str_flatten,
collapse=" "))
}
if(sourcetype=="rtibble"){
textdata=rtibble
}
if(!("id" %in% colnames(textdata))){
textdata=textdata %>%
dplyr::mutate(id=stringr::str_pad(1:dplyr::n(),
width=stringr::str_length(dplyr::n()),
pad="0")) %>%
dplyr::mutate(id=paste0("txt",.data$id))
}
textdata=textdata %>%
dplyr::select(.data$id,.data$text)
return(textdata)
}
devtools::document()
rm(get_textdata)
devtools::document()
library(textoteR)
devtools::document()
library(textoteR)
devtools::document()
library(textoteR)
Vignette(textoteR)
?browseVignettes
?browseVignettes("textoteR")
iramuteq_to_txm(from_dir=system.file("extdata",package="textoteR"),
filename="macron_covid.txt"
to_dir="macron_covid_corpus",)
devtools::document()
vignette("textoteR")
vignette("textoteR")
library(textoteR)
vignette(package="textoteR")
devtools::document()
library(textoteR)
vignette(package="textoteR")
devtools::build_vignettes()
vignette(package="textoteR")
library(textoteR)
vignette(package="textoteR")
vignette(package="textoteR")
library(textoteR)
vignette(package="textoteR")
